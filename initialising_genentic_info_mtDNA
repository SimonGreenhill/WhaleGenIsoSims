# We used R code to initialise the mtDNA haplotype and SNP allele frequency data for the simulations.

## Use mathematic distributions to estimate starting allele frequency data
## following Vatsiou et al 2016
## Distributions: dirichlet for mtDNA, beta for SNPs

## code to loop through Ne and m values to give starting values for simulations

setwd("/Users/ecar026/Dropbox/Geniso_work/BayesianModel/simupop")

## this uses two functions; simple.beta.dist.func and dist.mtDNA
## these have the following arguments in common:
## Ne1 - value of effective population size used to parameterise beta dist (SNPs) and dirichlet (mtDNA)
## m1 - value of effective number of migrants used to parameterise beta dist (SNPs) and dirichlet (mtDNA)
## reps - number of times to run simulation process, will give unique set of starting values
## pop.number - number of populations to run
## additionally simple.beta.dist requires loc.number, which is the number of SNP loci to simulate

## this requires:
## haplotype frequencies already entered and named after populations of interest
## genind: SNP allele frequencies from empirical data

start.gen.sim<-function(Ne1, m1, reps, pop.number, SNP.loc.number, genind) {
    ## create loops so that multiple values of Ne1 and m1 can be run
      for (i in 1:length(Ne1)) {
            for (j in 1:length(m1)) {
          
          ## create directory to hold results and move there
              dir.create(paste("Ne", Ne1[i], "m", m1[j], sep = "_"))
              setwd(paste("Ne", Ne1[i], "m", m1[j], sep = "_"))
              
              ## providing indication of where the function is at
              print(paste("generating sims for Ne", Ne1[i], "m", m1[j], sep = "_"))  
                
                ## generate SNPs from beta distribution using input data, this will write files to the directory
                simple.beta.dist.func(Ne1 = Ne1[i], m1 = m1[j], pop.number = pop.number, loc.number = SNP.loc.number, genind = genind, reps = reps) 
             
                   
                ## generate mtDNA haplotype frequencies using input data, this will write files to the directory
                dist.mtDNA(Ne1 =  Ne1[i], m1 = m1[j], reps = reps, pop.number = pop.number)
                setwd('..')
                                    }
                                  }
                
                    }


## For the mtDNA data:
## use sample_dirichlet fuction
## uses n, sample size and alpha, the Dirichlet distribution parameter
## we estimate alpha = Ne*m*p
## m = {0.1, 1, 10}
## p = vector of haplotype frequencies

library(igraph)
library(hierfstat)
library(adegenet)
library(srataG)

setwd("/Users/emac/Dropbox/Geniso_work/BayesianModel/initialising_code")

## mtDNA haplotype frequences for SRW from Carroll et al 2018
## randomly sample 50 samples each from NZ, AUS, PV and SAF so that bias
## towards NZ is less of a problem

NZ<-matrix(c(rep("BHA", 231), rep("BHB", 294), rep("BHC", 58), rep("BHD", 82), rep("BHE", 6),
             rep("CHJ", 1), rep("CHK", 2), rep("P42", 12), rep("P41", 1), rep("PHB", 4), 
             rep("P17", 1)),
           ncol=1, nrow=692)
NZ2<-sample(NZ) 

SAF<-matrix(c(rep("BakHapBP", 1), rep("SA950085", 1), rep("SA950127", 1), rep("SA960235", 1),
              rep("SA960243" , 1), rep("SA960312", 1), rep("SA960319", 1), rep("SA970592", 1),
              rep("SA970615", 1), rep("SA970617", 1), rep("ValHappB", 2), rep("SA950016", 2),
              rep("CarHapJJ", 3), rep("SA950109", 3), rep("SA960266", 3), rep("PatHap42", 4),
              rep("ValHappJ", 4), rep("SA950033", 4), rep("SA950039", 5), rep("SA950126", 5),
              rep("SA960250", 5), rep("ValHapAA", 6), rep("SA950020", 6), rep("SA950002", 7),
              rep("SA950006", 8), rep("ValHapDD", 10), rep("ValHapCC", 10), rep("SA950015", 11),
              rep("SA950028", 15), rep("ValHappK", 16), rep("SA950013", 16), rep("BakHapFF", 19),
              rep("ValHappN", 20), rep("SA950048", 23), rep("ValHappZ", 27), rep("SA950005", 27), 
              rep("PatHap17", 39), rep("BakHapEE", 40)), 
            ncol=1, nrow=350)

SAF2<-sample(SAF)

PV<-matrix(c(rep("ValHapII", 28), rep("ValHappJ", 19), rep("ValHappK", 18), rep("PatHap42", 17),
             rep("PatMalHB", 12), rep("ValHappA", 12), rep("ValHappB", 11), rep("ValHappD", 11),
             rep("ValHappL", 9), rep("ValHappI", 8), rep("ValHappQ", 8), rep("BakHapAA", 6), 
             rep("ValHappC", 6), rep("ValHappO", 6), rep("ValHappZ", 5), rep("ValHappP", 5),
             rep("ValHappW", 5), rep("ValHappG", 4), rep("ValHappX", 3), rep("ValHapCC", 2),
             rep("ValHappN", 2), rep("ValHapAA", 2), rep("ValHapEE", 2), rep("ValHappR", 2),
             rep("ValHappY", 2), rep("PatHap17", 1), rep("ValHapBB", 1), rep("ValHapFF", 1)),
           ncol=1, nrow=208)
PV2<-sample(PV)


AUS<-matrix(c(rep("BakHapAA", 30), rep("BakHapBP", 10), rep("BakHapCC", 16), rep("BakHapDD", 5),
              rep("BakHapEE", 8), rep("CarHapJJ", 2), rep("BakHapFF", 1), rep("SWPJSWPJ", 2),
              rep("PatHap42", 1), rep("PatHap17", 2)), 
            ncol=1, nrow=77)

AUS2<-sample(AUS)

###################################################################################################################################### 
## function to convert haplotype frequencies into format readable by hierfstat
## where mat is matrix with first column haplotype number,
## and subsequent columns frequency of each haplotype in each simulated pop
## samp is desired sample size
freq2genind2 <- function (mat, samp) {
    pop = ncol(mat)-1
    resmat <- matrix (nrow = samp, ncol = pop)
    for (i in 1:pop) 
      {
      resmat[,i] <-sample(mat[,1], samp, prob = mat[,i+1], replace = TRUE)
      resmat
      }
  
    resmat
    resmat2<-matrix(ncol = 3, nrow = pop*samp)
    popl<-as.vector(0)
          for (i in 1:pop) {popl<-c(popl, rep(i, samp))}
    resmat2[,1]<-popl[2:length(popl)]
    resmat2[,2]<-as.vector(resmat)
    resmat2[,3]<-as.vector(resmat)
    resmat2
}


## dist.fst is a function that 
## (1) calculates the alpha parameter for the Dirichlet distribution using Ne*m*freq 
## where Ne and m are user-set and freq comes from the empirical haplotype frequency data of Carroll et al (2018)
## (2) tests whether the FST produced falls within 10% of the desired FST value, keep the frequency
## distribution, otherwise redo the alpha parameter calculation
## (3) write the frequency distributions to a list in a text file if it meets the FST criteria

dist.fst<-function(Ne1, m1, FST, reps, pops, samp) {
  # create empty list to hold results
  res = 0
  while (res < reps)
  {
    # sample empirical hap freq distribution
    hapsamp<-c(sample(AUS2, 100, replace = TRUE), sample(NZ2, 100), sample(PV2, 100), sample(SAF2, 100))
    
    ## convert this to frequencies
    freq<-as.vector(table(hapsamp))
    freq<-freq/400
    
    ## calculate starting haplotype frequencies for given number of pops
    s1<-sample_dirichlet(pops, (Ne1*m1*freq))
    
    ## what FST does this give with sample size samp
    start_mtDNA<-cbind(1:length(freq), s1)
    Fst.loop<-genet.dist(freq2genind2(mat = start_mtDNA, samp = samp), diploid = FALSE, method = "WC84")
    
    if ((Fst.loop < (FST*1.1)) & (Fst.loop > (FST * 0.9)))
    {
      res = res+1
      write.table(s1, paste("mtDNA", res, ".txt", sep = ""),
                  col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
      
    }
    else 
    {res = res}
  }
}

###################################################################################################################################### 
###################################################################################################################################### 
## modelling SNP data as a beta distribution
###################################################################################################################################### 
###################################################################################################################################### 

## Step 1: Get empirical data from which to generate the simulated data
## used trial dataset as starting point for simulations for IndoPac and South Atlantic

#Bash script

#!/bin/bash 
#$ -cwd 
#$ -j y
#$ -S /bin/bash 
#$ -V
#$ -N IndoPacAlleleFreq ## job name
#$ -q highmemory.q
#$ -pe multi 4 # the script itself will command 3 processors in parallel, this can be referred to as NSLOTS in the commandline invocation


# load 
#module load stacks
module load stacks/2.0Beta9

## analyse single file with gstacks to get alignment and loci statistics
## recoded popmap so there is only one pop per ocean basin
populations -P ./stacksv2/gstacksMay18/Trial_mapq10_clip0.1_varalpha0.01_gtalpha0.01/ \
-M ./stacksv2/gstacksMay18/IndoPac/popmap_refcat_IndoPac.txt \
-O ./stacksv2/gstacksMay18/IndoPac/ \
-W ./stacksv2/gstacksMay18/Trial_mapq10_clip0.1_varalpha0.01_gtalpha0.01/whitelistv3 \
-t $NSLOTS -p 2 -r 0.95 --vcf --hwe --min_maf 0.05 --genepop --write_random_snp --merge_sites --renz hindIII


# module load vcftools/0.1.12a - check that the loci are bi-allelic
vcftools --vcf populations.snps.vcf --min-alleles 2 --max-alleles 2

## export from STACKS using genepop format; import into R and calculate allele freq
## this works, but we want the allele frequencies for the region overall.
## so removed the divide in the file between the pops and reloaded

library (hierfstat)
library(adegenet)
library(PopGenReport)
# read in genepop file of trial NZ and Australian SNP data
indopac.genepop<-read.genepop(file = "/Users/emac/Dropbox/Geniso_work/BayesianModel/initialising_code/IndoPac/BothPop/populations.snps.gen",
                              ncode = 2)

# creates SNP allele frequency data from the genepop file
# geneind is a genind object imported into R
# sample size is the number of loci you want allele frequencies from

snpfreq.func<-function(genind, sample.size){
    # create matrix to hold results
    res<-matrix(nrow = sample.size, ncol = 1)
    # for number of samples, sum the columns to get allele counts - but only every second one since there are two 
    # alleles per locus. Then / by 80 to get frequency and right to results matrix
    for (x in 1:sample.size) 
      {
      t1<-colSums(genind$tab[1:40,1:(2*sample.size)], na.rm = TRUE)
      res[x,1]<-t1[x*2]/80
    }
    res
}

###################################################################################################################################### 
# Step 2: create function to calculate beta distribution to sample starting SNP allele frequencies from and then test FST values

## simple.beta.dist.func
## (1) calculates the alpha and beta parameters for the beta distribution using:
## alpha <- (4*Ne1)*m1*p
## beta <- (4*Ne1)*m1*(1-p)
## one distribution calculated for each population, length loc.number of loci
## where Ne and m are user-set
## p is generated using empirical SNP data from genind file
##
## writes to file reps number of times

simple.beta.dist.func<-function (Ne1, m1, pop.number, loc.number, genind, reps){
  ## set up beta distribution parameters
  res = 0
  while (res < reps) {
    ## calculate frequency distribution for SNPs
    p<-snpfreq.func(genind, sample.size = loc.number)
    alpha <- (4*Ne1)*m1*p
    beta <- (4*Ne1)*m1*(1-p)
    
    ##generate distribution for each population
    dist.mat<-matrix(nrow = pop.number, ncol = loc.number)
    for (pop in 1:pop.number)
    {
      dist.mat[pop,]<-as.vector((rbeta(loc.number, shape1 = alpha, shape2 = beta)))
    }
    
    write.table(t(dist.mat), paste("SNP_", res, ".txt", sep = ""),
                  col.names = FALSE, row.names = FALSE, sep = "\t", quote = FALSE)
          
    res = res+1
  }
}  


###################################################################################################################################### 
## to check that the code was working in the way we expected, we did some trials:

## sim.fst is a function that samples from empirical haplotype frequencies (4 wintering grounds, 100 x each, hard coded atm)
## to generate vector freq. It then calculates the alpha parameter for the Dirichlet distribution using Ne*m*freq (Ne and m are user-set),
##  and uses this to generate haplotype frequency distributions for two simulated populations. These distributions are 
## then sampled from samp times and the differentiation index of the two simulated populations is calculated using the
## genet.dist function from the hierfstat package, using the particular method chosen by the user. This process is repeated
## replicate number of times to get a distribution of differentiation indices for each combination of Ne and m.
## the function produces a matrix with three columns; Ne and m, recording the values used in the simulation, and gen_dif, which
## records the value of genetic differentiation recorded for each simulation

sim.fst <-function(Ne1, m1, samp, replicates, method) {
  ## create matrix to hold results, and record what values of Ne and m were used in the run
  resmat<-matrix(nrow = replicates, ncol=3)
  resmat[,1]<-rep(Ne1, replicates)
  resmat[,2]<-rep(m1, replicates)
  colnames(resmat)<-c("Ne", "m", "gen_dif")
  
  # start loop for each iteration in replicate number
  for (i in 1:replicates){
    ## first we sample from the haplotype distributions
    hapsamp<-c(sample(AUS2, 100, replace = TRUE), sample(NZ2, 100), sample(PV2, 100), sample(SAF2, 100))
    ## convert this to frequencies
    freq<-as.vector(table(hapsamp))
    freq=freq/sum(freq)
    #assign Ne and migration rate
    Ne <- Ne1
    m <- m1
    #calculate alpha parameter for Dirichlet distribution
    alpha <- Ne*m*freq
    ## produce initial allele frequencies
    start_mtDNA<-cbind(1:length(freq), sample_dirichlet(2, alpha))
    ## record genetic differentiation value for this particular simulation in results matrix
    resmat[i,3]<-genet.dist(freq2genind2(mat = start_mtDNA, samp = samp), diploid = FALSE, method = method)
  }
  resmat
}

## testing the simulations
## FST ~ 0.001
Ne100m10_WC<-sim.fst(Ne1 = 100, m1 = 10, samp = 100, replicates = 10000, method = "WC84")
## FST ~ 0.01
Ne100m1_WC<-sim.fst(Ne1 = 100, m1 = 1, samp = 100, replicates = 10000, method = "WC84")
## FST ~ 0.1
Ne100m.1_WC<-sim.fst(Ne1 = 100, m1 = 0.1, samp = 100, replicates = 10000, method = "WC84")

###################################################################################################################################### 
## then we run the code to generate starting conditions for the simulations:

setwd("/Users/ecar026/Dropbox/Geniso_work/BayesianModel/simupop")

## scenario 1: 
simple.beta.dist.func(Ne1 = 400, m1=.01, pop.number = 2, samp.size = 100, loc.number = 1000, 
                      FST = 0.1, genind = indopac.genepop, reps = 100)
                      
                   
dist.fst(Ne1, m1, FST, reps, pops, samp)



